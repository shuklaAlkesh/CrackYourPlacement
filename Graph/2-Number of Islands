class Solution {
public:
    
    void bfs(int nrow,int ncol,vector<vector<int>> &vis,vector<vector<char>>& grid){
        vis[nrow][ncol] = 1;
        int n = grid.size();
        int m = grid[0].size();
        
        vector<int> riter = {-1,0,1,0};
        vector<int> citer = {0,1,0,-1};
        
        queue<pair<int,int>> q;
        q.push({nrow,ncol});
        
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            for(int i=0;i<4;i++){
                int nrow = row +riter[i];
                int ncol = col +citer[i];
                
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]){
                    vis[nrow][ncol] = 1;
                    q.push({nrow,ncol});
                }
            }
        }
        
        
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>>vis(n,vector<int>(m,0));
        int cnt = 0;
        
        for(int row = 0;row < n;row++){
            for(int col = 0;col < m ;col++){
                if(vis[row][col] == 0 && grid[row][col] == '1'){
                    bfs(row,col,vis,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};