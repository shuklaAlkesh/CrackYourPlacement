/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* root){
        ListNode* prev = NULL;
        ListNode* curr = root;
        
        while(curr){
            ListNode* front =  curr->next;
            curr->next = prev;
            prev = curr;
            curr = front;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(0);
        ListNode* p = reverse(l1);
        ListNode* q = reverse(l2);
        ListNode* curr = dummy;
        int carry = 0;

        while (p != nullptr || q != nullptr || carry != 0) {
            int x = (p != nullptr) ? p->val : 0;
            int y = (q != nullptr) ? q->val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr->next = new ListNode(sum % 10);
            curr = curr->next;
            
            if (p != nullptr) p = p->next;
            if (q != nullptr) q = q->next;
        }
        ListNode* head = reverse(dummy->next);
        return head;
    }   
};