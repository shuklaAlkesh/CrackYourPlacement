/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* prev;
    TreeNode* first;
    TreeNode* middle;
    TreeNode* last;
public:
    // First Approach
    // void Inorder(TreeNode* root,vector<int>& nums){
    //     if(root==NULL){
    //         return;
    //     }
    //     Inorder(root->left,nums);
    //     nums.push_back(root->val);
    //     Inorder(root->right,nums);
    // }
    // void solve(TreeNode* root,vector<int>& nums,int &i){
    //     if(root == NULL){
    //         return;
    //     }
    //     solve(root->left,nums,i);
    //     if(root->val != nums[i]){
    //         root->val = nums[i];
    //     }
    //     i++;
    //     solve(root->right,nums,i);
    // }
    // void recoverTree(TreeNode* root) {
    //     vector<int>nums;
    //     Inorder(root,nums);
    //     sort(nums.begin(),nums.end());
    //     int i=0;
    //     solve(root,nums,i);
    // }


    // Second Approach
    void Inorder(TreeNode* root){
        if(root == NULL){
            return;
        }
        Inorder(root->left);
        if(prev != NULL && root->val < prev->val){
            if(first == NULL){
                first = prev;
                middle = root;
            }else{
                last = root;
            }
        }
        prev = root;
        Inorder(root->right);
    }
    void recoverTree(TreeNode* root) {
        first = last = middle = NULL;
        prev = new TreeNode(INT_MIN);
        Inorder(root);
        if(first && last){
            swap(first->val,last->val);
        }else if(first && middle){
            swap(first->val,middle->val);
        }
    }
};