/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root,int sum,bool &flag,int targetSum){
        // base case 
        if(root == NULL){
            return;
        }
        sum += root->val;
        if(root->left == NULL && root->right == NULL){
            if(sum == targetSum){
                flag = true;
            }
        }else{
            solve(root->left,sum,flag,targetSum);
            solve(root->right,sum,flag,targetSum);
        }
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        // First Approach
        // if(root == NULL){
        //     return false;
        // }
        // int sum = 0;
        // bool flag = false;
        // solve(root,sum,flag,targetSum);
        // return flag;

        // Second Approach
        if (root == nullptr) {
            return false;
        }

        if (root->left == nullptr && root->right == nullptr) {
            return root->val == targetSum;
        }
        

        int newTargetSum = targetSum - root->val;
        return hasPathSum(root->left, newTargetSum) || hasPathSum(root->right, newTargetSum);
    }
};