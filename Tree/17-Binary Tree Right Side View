/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode* root,vector<int> &result,int level){
        if(root == NULL){
            return;
        }
        if(result.size() < level){
            result.push_back(root->val);
        }

        preorder(root->right,result,level+1);
        preorder(root->left,result,level+1);
    }
    vector<int> rightSideView(TreeNode* root) {
        // First Approach BY BFS
        // if(root == NULL){
        //     return {};
        // }

        // vector<int>result;
        // queue<TreeNode*>q;
        // q.push(root);
        // while(!q.empty()){
        //     int n = q.size();
        //     TreeNode* node = NULL;
        //     while(n--){
        //         node = q.front();
        //         q.pop();
        //         if(node->left != NULL){
        //             q.push(node->left);
        //         }
        //         if(node->right != NULL){
        //             q.push(node->right);
        //         }
        //     }
        //     result.push_back(node->val);
        // }
        // return result;

        // Second Approach BY DFS
        vector<int>result;
        preorder(root,result,1);
        return result;
    }
};