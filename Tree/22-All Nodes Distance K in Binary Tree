/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    // it stores the parent of the nodes
    unordered_map<TreeNode*, TreeNode*>parent;
public:
    void Inorder(TreeNode* root){
        if(root == NULL){
            return;
        }

        if(root->left != NULL){
            parent[root->left] = root;
        }
        Inorder(root->left);

        if(root->right != NULL){
            parent[root->right] = root;
        }
        Inorder(root->right);
    }
    void solve(TreeNode* root, int k,vector<int> &result){
        queue<TreeNode*>q;
        q.push(root);

        unordered_set<int>visited;
        visited.insert(root->val);

        while(!q.empty()){
            int n = q.size();

            if(k == 0){
                break;
            }

            while(n--){
                TreeNode* node = q.front();
                q.pop();
                // left
                if(node->left != NULL && !visited.count(node->left->val)){
                    q.push(node->left);
                    visited.insert(node->left->val);
                }
                // right
                if(node->right != NULL && !visited.count(node->right->val)){
                    q.push(node->right);
                    visited.insert(node->right->val);
                }
                // parent
                if(parent.count(node) && !visited.count(parent[node]->val)){
                    q.push(parent[node]);
                    visited.insert(parent[node]->val);
                }
            }
            k--;
        }

        while(!q.empty()){
            result.push_back(q.front()->val);
            q.pop();
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> result;
        Inorder(root);

        solve(target,k,result);
        return result;
    }
};