// class Solution {
// public:
//     vector<vector<int>> fourSum(vector<int>& nums, int target) {
//         int n = nums.size();
//         // vector<vector<int>> ans;
//         set<vector<int>>st;
//         for(int i=0;i<n;i++){
//             for(int j=i+1;j<n;j++){
//                 set<int> hashset;
//                 for(int k=j+1;k<n;k++){
//                     int sum = nums[i]+nums[j];
//                     sum+= nums[k];
//                     int fourth = target-sum;
//                     if(hashset.find(fourth) != hashset.end()){
//                         vector<int> temp = {nums[i],nums[j],nums[k],fourth};
//                         sort(temp.begin(),temp.end());
//                         st.insert(temp);
//                     }
//                     hashset.insert(nums[k]);
//                 }
//             }
//         }
//         vector<vector<int>>ans(st.begin(),st.end());
//         return ans;
//     }
// };

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                if (j != i + 1 && nums[j] == nums[j - 1]) continue;
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    long long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if (sum == target) {
                        vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                        ans.push_back(temp);
                        // Move k and l to the next different numbers to avoid duplicates
                        while (k < l && nums[k] == temp[2]) k++;
                        while (k < l && nums[l] == temp[3]) l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return ans;
    }
};
